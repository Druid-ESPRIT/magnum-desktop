#+TITLE: Magnum's modules and functionalities
#+AUTHOR: Druid
#+OPTIONS: ^:{}

* Modules
** User Management
The user table defines the model of the possible actors of Magnum, i.e. its
users, e.g.:
- Regular users
- Content creators
- Administrators

*** Users
:PROPERTIES:
:CUSTOM_ID: users
:END:

#+BEGIN_EXAMPLE
+----------------------------+
|            Users           |
|----------------------------|
| ID: int                    |
| username: String           |
| email: String              |
| password: String           |
| biography: String          |
| avatar: String             |
| status: enum<Status>       |
| admin: bool                |
| score: int                 |
+----------------------------+

Status {
    Disabled,
    Banned,
}
#+END_EXAMPLE

*** History
#+BEGIN_EXAMPLE
+----------------------------+
| History                    |
|----------------------------|
| ID: int                    |
| userID: int                |
| activity: enum<Activities> |
| description: String        |
| time: Date                 |
+----------------------------+

enum Activities {
  Security,
  Billing,
  Profile,
}
#+END_EXAMPLE

Attributes:
- ~userID~: References the /ID/ column of the [[#users][Users]] table.

** Podcast Management
*** Podcasts
#+BEGIN_EXAMPLE
+-----------------------------+
| Podcasts                    |
|-----------------------------|
| ID: int                     |
| subscriptionID: int         |
| categoryID: int             |
| views: int = 0              |
| title: String               |
| description: String         |
| hash: String                |
| rating: int                 |
| podcasterID: int            |
+-----------------------------+
#+END_EXAMPLE

Attributes:
- ~subscriptionID~: References the /ID/ column of the [[#subscriptions][Subscriptions]] table. Unless it is *NULL*, the podcast is part of a subscription.
- ~categoryID~: References the /ID/ column of the [[#categories][Categories]] table.
- ~hash~: A podcast's hash is calculated and stored in order to stop the re-uploading of already existing audio files (podcasts) within the database.

*** Categories
:PROPERTIES:
:CUSTOM_ID: categories
:END:

#+BEGIN_EXAMPLE
+---------------------+
| Categories          |
|---------------------|
| ID: int             |
| name: String        |
| description: String |
+---------------------+
#+END_EXAMPLE

** Article Management
*** Articles
:PROPERTIES:
:CUSTOM_ID: articles
:END:

#+BEGIN_EXAMPLE
+------------------+
| Articles         |
|------------------|
| ID: int          |
| author: String   |
| title: String    |
| content: String  |
+------------------+
#+END_EXAMPLE

*** Comments
#+BEGIN_EXAMPLE
+------------------+
| Comments         |
|------------------|
| ID: int          |
| userID: int      |
| articleID: int   |
| message: String  |
| replyingTo: int  |
| submitDate: Date |
+------------------+
#+END_EXAMPLE

Attributes:
- ~userID~: References the /ID/ column of the [[#users][Users]] table.
- ~articleID~: References the /ID/ column of the [[#articles][Articles]] table.

** Subscription Management:

Podcasters can monetize their content in the form of subscriptions.

Users that choose to subscribe to said podcasters, must pay the fee determined
by them.

*** Payment Method
:PROPERTIES:
:CUSTOM_ID: payment-method
:END:

#+BEGIN_EXAMPLE
+--------------------------+
| PaymentMethod            |
|--------------------------|
| ID: int                  |
| userID: int              |
| issuer: Enum<Issuers>    |
| cardNumber: int          |
| expiryYear: int          |
| expiryMonth: int         |
| CVV: int                 |
+--------------------------+

enum Issuers {
    VISA,
    MasterCard,
    AmericanExpress,
    Maestro,
}
#+END_EXAMPLE

*** Subscriptions
:PROPERTIES:
:CUSTOM_ID: subscriptions
:END:

#+BEGIN_EXAMPLE
+------------------+
|  Subscriptions   |
|------------------|
| ID: int          |
| cardID: int      |
| podcasterID: int |
| duration: int    |
| price: Float     |
+------------------+
#+END_EXAMPLE

Attributes:
- ~cardID~: References the /ID/ column of the [[#payment-method][Payment Method]] table.
- ~podcasterID~: References the /ID/ column of the [[#offenses][Offenses]] table.
- ~duration~: The duration of the subscription in **months**.

** Flag management
Our flagging system allows the user to report another person based on a certain offense.

Flagging someone directly affects their score. Administrators are notified and called to manually review (and ban if necessary) the accounts of users whose score has reached the minimum threshold.

*** Flags
#+BEGIN_EXAMPLE
+---------------------+
| Flags               |
|---------------------|
| ID: int             |
| userID: int         |
| offenseID: String   |
| description: String |
| dateFlagged: Date   |
+---------------------+
#+END_EXAMPLE

Attributes:
- ~userID~: References the /ID/ column of the [[#users][Users]] table.
- ~offenseID~: References the /ID/ column of the [[#offenses][Offenses]] table.

*** Offenses
:PROPERTIES:
:CUSTOM_ID: offenses
:END:
#+BEGIN_EXAMPLE
+-------------------------+
| Offenses                |
|-------------------------|
| ID: int                 |
| deduction: int          |
| kind: enum<Kind>        |
+-------------------------+

enum Kind {
  Harassment,
  Spam,
  Violence,
}
#+END_EXAMPLE

Attributes:
- ~deduction~: The amount of points to deduct from a user's score.

** Ticket management
*** Ticket
#+BEGIN_EXAMPLE
+----------------------------+
| Ticket                     |
|----------------------------|
| ID: int                    |
| submittedBy: int           |
| resolvedBy: int            |
| kindID: int                |
| description: String        |
| status: enum<Status>       |
+----------------------------+

enum Status {
  Resolved,
  Closed,
  Pending,
}
#+END_EXAMPLE

Attributes:
- ~submittedBy~: References the ID column of the [[#users][Users]] table - The user that submitted the ticket.
- ~resolvedBy~: References the ID column of the [[#users][Users]] table - The user that resolved/handled the ticket.
- ~kindID~: References the ID column of the [[#ticket-kind][Ticket Kind]] table.

*** Ticket Kind
:PROPERTIES:
:CUSTOM_ID: ticket-kind
:END:

#+BEGIN_EXAMPLE
+------------------------+
| TicketKind             |
|------------------------|
| ID: int                |
| priority: int          |
| kind: enum<Kind>       |
+------------------------+

enum Kind {
  FeatureRequest,
  BugReport,
  FailedPayment,
  AccountRecovery,
  Other,
}
#+END_EXAMPLE

* Functionalities
1. Audio player.
2. [[#footnotes][Discover page^{[1]}]].
3. [[#footnotes][XML parser^{[2]}]].
4. Keyboard navigation.
5. Slur filter for the /Comments/ model.
6. Spam filter for the /Podcasts/ model.
7. Get started guide.

* Footnotes
:PROPERTIES:
:CUSTOM_ID: footnotes
:END:

¹ Discover page: An interface that presents a curated list of podcasts to the
user sorted by their category.

² XML Parser: RSS is at the backbone of the podcasting industry; RSS speaks XML.
Magnum may retrieve and play *outside podcasts*, i.e. podcasts that are not
available directly on the platform.
