#+TITLE: Magnum's Class & Functionality Documentation
#+AUTHOR: Druid

* Magnum
** Description
Magnum is a Podcasting platform, similar to Google Podcasts and Spotify.

** Models:
*** User Management:
#+BEGIN_EXAMPLE
+--------------------+
|        User        |
|--------------------|
| ID                 |
| Username           |
| Email              |
| Password           |
| Biography          |
| ProfilePicturePath |
+--------------------+

// Extended documentation of the "User" table -----------------------------
User {
  ID: Int,                    // Unsigned integer as its type.
  Username: String,           // Unique username.
  Email: String,
  Password: String,           // Hashed password.
  Biography: String,          // "About me".
  ProfilePicturePath: String, // Path to the user's profile picture in the server's filesystem.
}

+-------------------+
|    Preferences    |
|-------------------|
| UserID: Int       |
| Comedy¹: bool     |
| Science²: bool    |
| Technology³: bool |
+-------------------+

// Extended documentation fo the "Preferences" table ----------------------
[1,2,3]: If set to `true`, it means that this user is interested in this
topic. This is used to determine the kind/category of content that will later
appear in their feed.
#+END_EXAMPLE

**** Description:
The user table defines the model of a user, see /[[#types]["Types"]]/  for a list of available types.

**** Types:
:PROPERTIES:
:CUSTOM_ID: types
:END:
1. Viewers (User).
2. Uploaders (Content creators).
3. Moderators (Admins).

-----

*** Subscription Management:
*Podcasters* can monetize their content in the form of subscriptions.

Users may choose to pay a fee to subscribe to them. Based on the tier the user
chooses, they receive access to perks that non-subscribed users may not. The pricing
of these tiers is not regulated by Magnum.

#+BEGIN_EXAMPLE
+------------------+
|   Subscription   |
|------------------|
| ID: Int          |
| UserID: Int      |  <--- This joins with the ID
| PodcasterID: Int |       column of the user table.
| From: Date       |
| To: Date         |
| Price: Float     |
+------------------+
#+END_EXAMPLE

-----

*** Podcast Management:
#+BEGIN_EXAMPLE
+-----------------------------+
| Podcast                     |
|-----------------------------|
| ID: Int                     |
| SubscriptionID: Int         | <-,
| Category: Enum<Category>    |   |
| Views: Int = 0              |   |
| ImagePath: String           |   |
| Title: String               |   |
| Description: String         |   \,----> This joins with the ID column
| Hash: String                |           of the subscription table.
| Rating: Int (1..5)          |
| PodcasterID: Int            | <----:
+-----------------------------+      :----> This joins with the user ID column
                                            of the user (i.e. podcaster) table.

// Extended documentation of the "Podcast" table --------------------------
- Hash: A podcast's hash is calculated and stored in order
to stop a podcaster from re-uploading the same exact audio file more than once.
- SubscriptionID: If SubscriptionID of the Podcast table is a '0', the podcast is not a part of any subscription,
meaning the podcast is free of charge.

+------------------+
| Comment          |
|------------------|
| UserID: Int      | <---- This joins with the ID
| PodcastID: Int   | <-,   column of the "User" table.
| ReplyingTo: Int  |   |
| Message: String  |   |
| SubmitDate: Date |   \,-----> This joins with the ID column of the "Podcast" table.
+------------------+

// Extended documentation of the "Comment" table --------------------------
enum Category {
    Comedy,
    Science,
    Horror,
    Technology,
    etc.
}

- UserID: The user ID of the original commenter.
- ReplyingTo: This points to some user's ID (instead of their username (String),
which could be costly in a giant database). If a comment is not a reply, this column takes a '0'.
#+END_EXAMPLE

-----

*** Playlist Management:
#+BEGIN_EXAMPLE
+---------------------+
| Playlist            |
|---------------------|
| ID: Int             |
| UserID: Int         | <-- This joins with ID column of the "User" table.
| Name: String        |
| Description: String |
| CreationDate: Date  |
| Podcasts: ID[Int]   | <-- This joins with ID column of the "Podcast" table.
+---------------------+
#+END_EXAMPLE

-----

*** Payment/Cart Management:
#+BEGIN_EXAMPLE
TODO: Fill this puppy with the appropriate fields.

    +------------------------+
    |         Payment        |
    |------------------------|
    |           ...          |
    +------------------------+
#+END_EXAMPLE


-----

*** History Management:
Possible views that can be shown based on the data provided by this module:
- Profile activity.
- Commenting activity.
- Watch history.
- Purchase (subscriptions) history.

#+BEGIN_EXAMPLE
NOTE: This model is not ready yet.
TODO: Finalize this model.

+-----------------+
| History         |
|-----------------|
| UserID: Int     | <--- This joins with the ID column of
| Message: String |      the User table.
| Time: Date      |
+-----------------+
#+END_EXAMPLE

-----

** Tasks:
1. /[[#foot][Feed]]/.
2. Audio player.
3. Playlists.
4. /[[#foot][XML Parser]]/.
5. Donations.
6. Slur-filter.
7. Spam-filter.
8. Keyboard navigation.
9. Get started/usage guide/documentation.

** Footnotes:
:PROPERTIES:
:CUSTOM_ID: foot
:END:
- Feed: A discoverable interface that presents a curated list of podcasts that constantly evolves per the *user's preferences*.
- XML Parser: RSS is at the backbone of the podcasting industry; RSS speaks XML. Magnum may retrieve and play *outside podcasts*, i.e. podcasts that are not available directly on the platform.
